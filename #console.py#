#!/usr/bin/python3
'''Contains the definition of the 'HBNBCommand' class which is
to serve as the console for the HBNB project.'''


import cmd
import re
from models import storage
from models.amenity import Amenity
from models.base_model import BaseModel
from models.city import City
from models.place import Place
from models.review import Review
from models.state import State
from models.user import User


class HBNBCommand(cmd.Cmd):
    prompt = '(hbnb) '
    class_names = ('BaseModel', 'User', 'Place', 'State', 'City',
                   'Amenity', 'Review')

    def emptyline(self):
        '''Is called when an empty line is passed to the console.
        '''
        pass

    @staticmethod
    def remove_quotes(input):
        '''Non-magic custom function used to remove quotes from input arguments
        '''
        result = re.search(r'''(?<=["|'])(.)*(?=["|'])''', input)
        if result:
            return(result.group(0))
        return(input)

    def precmd(self, line):
        '''Called on input lines before they are processed by onecmd
        '''
        line = line.strip()
        is_match = re.match(r'''^[\s]*[A-Z][a-z]+[.][a-z]+\(["]?[-a-z0-9]*'''
                            + '''["]?[,]?[-\s\w}0-9{""'',:]*\)''', line)
        if is_match is not None:
            mthd = re.search(r'''(?<=[.])[a-z]*[a-z](?=\()''', line)
            if mthd is not None:
                command = mthd.group(0)
            model = re.search(r'''^[A-Z][a-z]+[a-z](?=[.])''', line)
            if model is not None:
                command += " " + model.group(0)
                args = re.search(r'''(?<=\()(.)*(?=\))''', line)
            if args is not None:
                """ removes the dictionary argument so it is not
                confused for a normal argument """
                args = re.sub(r'''{[-\w"'_:,\s]*}''', "", args.group(0))
                args = args.split(", ")
                unquoted_args = list(map(HBNBCommand.remove_quotes, args))
                command += " " + " ".join(unquoted_args)
                dict_arg = re.search(r'''{[\w"'_:,\-\s]*}''', line)
                if dict_arg is not None:
                    command += " " + dict_arg.group(0)
            return(command)
        return(line)

    def onecmd(self, line):
        '''Called when anything is passed in response to the prompt
        '''
        parsed_line = self.precmd(line)
        return super().onecmd(parsed_line)

    def do_quit(self, line):
        '''Quit command to exit the program
        '''
        return True

    def do_EOF(self, line):
        '''Exits when CTRL+D on the keyboard is pressed
        '''
        return True

    def do_create(self, line):
        '''Creates a new instance of a specified class.
        '''
        args = line.split()
        if len(args) != 1:
            print("** class name missing **")
        else:
            class_name = args[0].strip()
            if class_name in HBNBCommand.class_names:
                obj = eval(class_name)()
                obj.save()
                print(obj.id)
            else:
                print("** class doesn't exist **")

    def do_show(self, line):
        '''Prints the string representation of an instance with the exact id
        '''
        args = line.split()
        if len(args) >= 1:
            class_name = args[0].strip()
            if class_name in HBNBCommand.class_names:
                if len(args) == 2:
                    search_id = args[1].strip()
                    search_key = "{}.{}".format(class_name, search_id)
                    storage.reload()
                    obj_dict = storage.all()
                    if search_key in obj_dict.keys():
                        obj = obj_dict[search_key]
                        print(obj)
                    else:
                        print("** no instance found **")
                else:
                    print("** instance id missing **")
            else:
                print("** class doesn't exist **")
        else:
            print("** class name missing **")

    def do_destroy(self, line):
        '''Deletes an instance based on the class name and id
        '''
        args = line.split()
        if len(args) >= 1:
            class_name = args[0].strip()
            if class_name in HBNBCommand.class_names:
                if len(args) == 2:
                    search_id = args[1].strip()
                    search_key = "{}.{}".format(class_name, search_id)
                    storage.reload()
                    obj_dict = storage.all()
                    if search_key in obj_dict.keys():
                        storage.delete(search_key)
                    else:
                        print("** no instance found **")
                else:
                    print("** instance id missing **")
            else:
                print("** class doesn't exist **")
        else:
            print("** class name missing **")

    def do_all(self, line):
        '''Prints the string form of all instances of the specified class name
        '''
        class_name = line.strip()
        if class_name in HBNBCommand.class_names or line == "":
            obj_dict = storage.all()
            if line:
                obj_list = [str(item) for item in obj_dict.values()
                            if item.__class__.__name__ == class_name]
            else:
                obj_list = [str(item) for item in obj_dict.values()]
            print(obj_list)
        else:
            print("** class doesn't exist **")

    def do_count(self, line):
        ''' Takes a class name and prints number of existing instances
        '''
        class_name = line.strip()
        if class_name in HBNBCommand.class_names:
            obj_dict = storage.all()
            obj_list = [str(item) for item in obj_dict.values()
                        if item.__class__.__name__ == class_name]
            print(len(obj_list))
        else:
            print("** class doesn't exist **")

    def do_update(self, line):
        '''Updates an instance based on a class name and id.
        '''
        print(line)
        if ('{' in line and '}' in line):
            a_index = line.find('{')
            z_index = line.find('}')
            arg_dict = eval(line[a_index:z_index + 1])
            line = line[:a_index - 1]
            for key in arg_dict:
                self.do_update(f"{line} {key} {arg_dict[key]}")
            return
        args = line.split()
        if len(args) >= 1:
            class_name = args[0]
            if class_name in HBNBCommand.class_names:
                if len(args) >= 2:
                    instance_id = args[1]
                    obj_dict = storage.all()
                    key = f"{class_name}.{instance_id}"
                    if key in obj_dict.keys():
                        obj = obj_dict[key]
                        if len(args) >= 3:
                            attribute_name = args[2]
                            if len(args) >= 4:
                                value = args[3]
                                setattr(obj, attribute_name, value)
                                storage.new(obj)
                                obj.save()
                            else:
                                print("** value missing **")
                        else:
                            print("** attribute name missing **")
                    else:
                        print("** no instance found **")
                else:
                    print("** instance id missing **")
            else:
                print("** class doesn't exist **")
        else:
            print("** class name missing **")


if __name__ == '__main__':
    HBNBCommand().cmdloop()